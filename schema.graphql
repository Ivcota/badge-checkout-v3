# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
}

type Attendant {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  congregation: Congregation
  keyman: Department
  department: Department
  badgeIsCheckedIn: Boolean
}

input AttendantWhereUniqueInput {
  id: ID
  email: String
}

input AttendantWhereInput {
  AND: [AttendantWhereInput!]
  OR: [AttendantWhereInput!]
  NOT: [AttendantWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  phone: StringFilter
  congregation: CongregationWhereInput
  keyman: DepartmentWhereInput
  department: DepartmentWhereInput
  badgeIsCheckedIn: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input AttendantOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  badgeIsCheckedIn: OrderDirection
}

input AttendantUpdateInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  congregation: CongregationRelateToOneForUpdateInput
  keyman: DepartmentRelateToOneForUpdateInput
  department: DepartmentRelateToOneForUpdateInput
  badgeIsCheckedIn: Boolean
}

input CongregationRelateToOneForUpdateInput {
  create: CongregationCreateInput
  connect: CongregationWhereUniqueInput
  disconnect: Boolean
}

input DepartmentRelateToOneForUpdateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
  disconnect: Boolean
}

input AttendantUpdateArgs {
  where: AttendantWhereUniqueInput!
  data: AttendantUpdateInput!
}

input AttendantCreateInput {
  firstName: String
  lastName: String
  email: String
  phone: String
  congregation: CongregationRelateToOneForCreateInput
  keyman: DepartmentRelateToOneForCreateInput
  department: DepartmentRelateToOneForCreateInput
  badgeIsCheckedIn: Boolean
}

input CongregationRelateToOneForCreateInput {
  create: CongregationCreateInput
  connect: CongregationWhereUniqueInput
}

input DepartmentRelateToOneForCreateInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

type Department {
  id: ID!
  name: String
  keyman: Attendant
  attendants(
    where: AttendantWhereInput! = {}
    orderBy: [AttendantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attendant!]
  attendantsCount(where: AttendantWhereInput! = {}): Int
}

input DepartmentWhereUniqueInput {
  id: ID
}

input DepartmentWhereInput {
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
  id: IDFilter
  name: StringFilter
  keyman: AttendantWhereInput
  attendants: AttendantManyRelationFilter
}

input AttendantManyRelationFilter {
  every: AttendantWhereInput
  some: AttendantWhereInput
  none: AttendantWhereInput
}

input DepartmentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input DepartmentUpdateInput {
  name: String
  keyman: AttendantRelateToOneForUpdateInput
  attendants: AttendantRelateToManyForUpdateInput
}

input AttendantRelateToOneForUpdateInput {
  create: AttendantCreateInput
  connect: AttendantWhereUniqueInput
  disconnect: Boolean
}

input AttendantRelateToManyForUpdateInput {
  disconnect: [AttendantWhereUniqueInput!]
  set: [AttendantWhereUniqueInput!]
  create: [AttendantCreateInput!]
  connect: [AttendantWhereUniqueInput!]
}

input DepartmentUpdateArgs {
  where: DepartmentWhereUniqueInput!
  data: DepartmentUpdateInput!
}

input DepartmentCreateInput {
  name: String
  keyman: AttendantRelateToOneForCreateInput
  attendants: AttendantRelateToManyForCreateInput
}

input AttendantRelateToOneForCreateInput {
  create: AttendantCreateInput
  connect: AttendantWhereUniqueInput
}

input AttendantRelateToManyForCreateInput {
  create: [AttendantCreateInput!]
  connect: [AttendantWhereUniqueInput!]
}

type Congregation {
  id: ID!
  name: String
  publishers(
    where: AttendantWhereInput! = {}
    orderBy: [AttendantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attendant!]
  publishersCount(where: AttendantWhereInput! = {}): Int
}

input CongregationWhereUniqueInput {
  id: ID
}

input CongregationWhereInput {
  AND: [CongregationWhereInput!]
  OR: [CongregationWhereInput!]
  NOT: [CongregationWhereInput!]
  id: IDFilter
  name: StringFilter
  publishers: AttendantManyRelationFilter
}

input CongregationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CongregationUpdateInput {
  name: String
  publishers: AttendantRelateToManyForUpdateInput
}

input CongregationUpdateArgs {
  where: CongregationWhereUniqueInput!
  data: CongregationUpdateInput!
}

input CongregationCreateInput {
  name: String
  publishers: AttendantRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createAttendant(data: AttendantCreateInput!): Attendant
  createAttendants(data: [AttendantCreateInput!]!): [Attendant]
  updateAttendant(
    where: AttendantWhereUniqueInput!
    data: AttendantUpdateInput!
  ): Attendant
  updateAttendants(data: [AttendantUpdateArgs!]!): [Attendant]
  deleteAttendant(where: AttendantWhereUniqueInput!): Attendant
  deleteAttendants(where: [AttendantWhereUniqueInput!]!): [Attendant]
  createDepartment(data: DepartmentCreateInput!): Department
  createDepartments(data: [DepartmentCreateInput!]!): [Department]
  updateDepartment(
    where: DepartmentWhereUniqueInput!
    data: DepartmentUpdateInput!
  ): Department
  updateDepartments(data: [DepartmentUpdateArgs!]!): [Department]
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteDepartments(where: [DepartmentWhereUniqueInput!]!): [Department]
  createCongregation(data: CongregationCreateInput!): Congregation
  createCongregations(data: [CongregationCreateInput!]!): [Congregation]
  updateCongregation(
    where: CongregationWhereUniqueInput!
    data: CongregationUpdateInput!
  ): Congregation
  updateCongregations(data: [CongregationUpdateArgs!]!): [Congregation]
  deleteCongregation(where: CongregationWhereUniqueInput!): Congregation
  deleteCongregations(where: [CongregationWhereUniqueInput!]!): [Congregation]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  attendants(
    where: AttendantWhereInput! = {}
    orderBy: [AttendantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Attendant!]
  attendant(where: AttendantWhereUniqueInput!): Attendant
  attendantsCount(where: AttendantWhereInput! = {}): Int
  departments(
    where: DepartmentWhereInput! = {}
    orderBy: [DepartmentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Department!]
  department(where: DepartmentWhereUniqueInput!): Department
  departmentsCount(where: DepartmentWhereInput! = {}): Int
  congregations(
    where: CongregationWhereInput! = {}
    orderBy: [CongregationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Congregation!]
  congregation(where: CongregationWhereUniqueInput!): Congregation
  congregationsCount(where: CongregationWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
